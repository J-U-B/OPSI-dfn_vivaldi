;=====================================================================
; product specific variables  VIVALDI
; J. Boettge <boettge@mpi-halle.mpg.de>  2018-10-16 12:24:50 +0200
;=====================================================================

include_insert "%ScriptPath%\variables.opsiinc"
;include_append "%ScriptPath%\exitcode_msi.opsiinc"

Set $MAP$ 				= getProductMap
Set $FullProductId$     = getValue("id", $MAP$)
Set $ProductName$   	= getValue("name", $MAP$)
Set $Version$       	= getValue("ProductVersion", $MAP$)
Set $SystemType$    	= GetSystemType
Set $NTVersion$   		= GetMsVersionInfo

;-----------------------------------------------------------
; basic requirements
;-----------------------------------------------------------
requiredWinstVersion >= "4.11.6"

if CompareDotSeparatedNumbers($NTVersion$, "<", "6.1")
	LogError "OS is not Windows 7 or above"
	isFatalError
endif

if not ($SystemType$ = "64 Bit System")
	LogError "OS is not a 64 Bit System"
	isFatalError
endif

;-----------------------------------------------------------
;*** get LogLevel from property
Set $LogLevelDefault$ = GetProductProperty("log_level","default")

;-----------------------------------------------------------
;*** detect testing package:
if (strPos($FullProductId$, "0_") = "0") and (strPos($FullProductId$, "test_") = "0")
	; no a testing package
	set $ProductId$  		= $FullProductId$ 
	set $Testing$ 			= "false"
	if ($LogLevelDefault$ = "default")
		set $LogLevelDefault$  	= "{{DEFAULT_RELEASE_LOGLEVEL}}"
	endif
else
	; this is a testing package
	comment "Prefix for testing package detected"
	set $ProductId$  		= strPart($FullProductId$, calculate(strPos($FullProductId$,"_") + "+1"), strLength($FullProductId$))
	set $Testing$ 			= "true"
	if ($LogLevelDefault$ = "default")
		set $LogLevelDefault$  	= "{{DEFAULT_TESTING_LOGLEVEL}}"
	endif
endif
setlogLevel 				= $LogLevelDefault$

;-----------------------------------------------------------
;*** detect DFN package:
if (strPos($FullProductId$, "o4i_") = "0") AND (strPos($FullProductId$, "dfn_") = "0")
	set $isDFN$ = "false"
	set $StrippedProductId$ = $ProductId$
else
	set $isDFN$ = "true"
	set $StrippedProductId$ = strPart($ProductId$,"5",strLength($ProductId$))
endif

;-----------------------------------------------------------
;*** select PSDETAIL:
set $PSDETAIL$ 			= "%ScriptPath%\bin\psdetail.exe"
if (CompareDotSeparatedNumbers($NTVersion$, ">=", "10.0"))
	set $PSDETAIL$ 			= "%ScriptPath%\bin\psdetail4.exe"
endif

;-----------------------------------------------------------
; software architecture; valid values: "32 bit", "64 bit", "sysnative"

Set $sw_arch$ = GetProductProperty("install_architecture","sysnative")
Set $sw_arch$ = takeString(0, splitString($sw_arch$, " "))

if ( $sw_arch$ = "sysnative" )
	if ($SystemType$ = "64 Bit System")
		Set $sw_arch$ = "64"
	else
		Set $sw_arch$ = "32"
	endif
endif

if ($sw_arch$ = "64")
	; 64 bit software
	set $InstallBase$ = "%ProgramFiles64Dir%"
else
	; 32 bit software
	set $InstallBase$ = EnvVar("ProgramFiles(x86)")
endif

;-----------------------------------------------------------
;; language property: "de, "en_US", "en_GB"
; Set $sw_lang$ = GetProductProperty("default_language","en_US")
;; ...property is currently not enabled in OPSI/control 
set $sw_lang$ = "en_US"

;-----------------------------------------------------------
; create desktop link?
Set $sw_DesktopLink$ = GetProductProperty("DesktopLink","False")

;-----------------------------------------------------------
; make Vivaldi to the default browser?
Set $pr_MakeDefault$ = GetProductProperty("make_default", "false")

;-----------------------------------------------------------
; post install/uninstall properties:
set $CustomPostInstall$ 	= getProductProperty("custom_post_install","none")
set $CustomPostUninstall$ 	= getProductProperty("custom_post_uninstall","none")

;-----------------------------------------------------------
Set $ProductDir$	= stringReplace($ProductName$," ","")
;Set $ProductDir$	= $ProductId$
Set $SrcDir$		= "%ScriptPath%\files\" 
Set $InstallDir$    = $InstallBase$+"\"+$ProductDir$
Set $LogDir$ 	    = "%SystemDrive%\tmp"
Set $InstallLog$    = $LogDir$ + "\"+$ProductId$+"_install.log"
Set $UninstallLog$  = $LogDir$ + "\"+$ProductId$+"_uninstall.log"
Set $ExDir$			= $ProductName$ + "-bin"
Set $ExDirLong$		= "%opsiTmpDir%\" + $ProductName$ + "-bin\"
Set $Archive$		= $ProductName$ + "." + $Version$ + ".x" + $sw_arch$ + ".7z"
Set $TempDir$		= "%opsiTmpDir%"
Set $UnZip$         = "%ScriptPath%\bin\7z.exe"

if ($isDFN$ = "true")
	set $Img_Install$	= "%ScriptPath%\images\" + $StrippedProductId$ +"_install_dfn.png"
else
	set $Img_Install$	= "%ScriptPath%\images\" + $StrippedProductId$ +"_install.png"
endif
set $Img_Uninstall$	= "%ScriptPath%\images\" + $StrippedProductId$ +"_uninstall.png"
set $Img_Prepare$	= "%ScriptPath%\images\" + $StrippedProductId$ +"_prepare.png"

ShowBitmap $Img_Prepare$ $ProductName$

;-----------------------------------------------------------
Set $MinimumSpace$ 	= "360 MB"
Set $MainBin$      	= $StrippedProductId$ +".exe"
Set $NotifierBin$	= $InstallDir$ + "\" + "update_notifier.exe"

;-----------------------------------------------------------
if ( $sw_arch$ = "32" )
	Set $Installer$		  = $SrcDir$ + $ProductName$ + "." + $Version$ + ".exe"
else
	; $sw_arch$ = "64" 
	Set $Installer$		  = $SrcDir$ + $ProductName$ + "." + $Version$ + ".x64.exe"	
	Set $MinimumSpace$ 	= "400 MB"
endif

;-----------------------------------------------------------
if ($isDFN$ = "true")
	Set $MPIMSP_Reg$		 = "HKEY_Local_Machine\Software\_DFN\" + $ProductName$
else
	Set $MPIMSP_Reg$		 = "HKEY_Local_Machine\Software\_MPIMSP\" + $ProductName$
endif

Set $RegPathUninstall$	 = "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall"
Set $RegPathUninstall64$ = "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall"
Set $RegPathUninstall32$ = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall"


