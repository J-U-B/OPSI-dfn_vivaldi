;=====================================================================
; delsub.opsiinc VIVALDI
; J. Boettge <boettge@mpi-halle.mpg.de>  2022-06-16 15:26:15 +0200
;=====================================================================

;=======================================
[sub_delsub_main]
;=======================================
Message "Removing previous version(s) of " + $ProductName$
ShowBitmap $Img_Prepare$ $ProductName$
marktime

if FileExists("%ScriptPath%\checkinstance.opsiinc")
	include_append "%ScriptPath%\checkinstance.opsiinc"
	sub_checkinstance_init
else
	isFatalError "File not found: checkinstance.opsiinc"
endif

;=== search for OPSI package uninstall info (not the native installer!)
Set $bInstalled$ 	= "0"
Set $UninstList$ 	= emptyList($UninstList$)
Set $UninstRegList$ = emptyList($UninstRegList$)
for %s% in $SrchLst$ do sub_search_opsi_inst_reg
Set $bInstalled$ 	= count($UninstList$)

if ($bInstalled$ INT> "0")
	ShowBitmap $Img_Uninstall$	 $ProductName$

	;=== kill running update notifier
	; allow to kill update notifier in any case:
	set $Kill_Override$ = "true"
	set $CheckProcess$  = $NotifierPattern$
	sub_checkinstance

	;=== kill running instances
	set $Kill_Override$ = "false"
	set $CheckProcess$  = $MainBin$
	sub_checkinstance

	;=== remove general settings (links, registry settings)
	sub_do_opsi_inst_remove_generals

	;=== remove found setups
	for %s% in $UninstList$ do sub_do_opsi_inst_remove

	;=== custom post uninstall
	if not ($CustomPostUninstall$ = "none")
		if FileExists("%ScriptPath%\custom\" + $CustomPostUninstall$)
			ShowBitmap $Img_Uninstall_Custom$ $ProductName$
			comment "Starting custom post uninstall"
			include_append "%ScriptPath%\custom\" + $CustomPostUninstall$
			SUB_POST_UNINSTALL
			ShowBitmap $Img_Uninstall$ $ProductName$
		else
			logError "Can't find custom post uninstall script: %ScriptPath%\custom\" + $CustomPostUninstall$
		endif
	endif

endif

if (count($UninstRegList$) INT> "0")
	Message "Removing opsi_inst uninstall information"
	for %s% in $UninstRegList$ do Registry_RemoveVivaldiInfo_loop /sysnative
endif

;=== update productOnClient information on depot server
Message "Updating status information on depot"
set $result$ = removeProductVerOnClientStatus($ProductFilter$, $ProductVersionFilter$)

;=== measure time
set $TimeDiff$ = getDiffTimeSec
Message  "Removal time: " + $TimeDiff$ + " seconds"


;=======================================
[sub_search_opsi_inst_reg]
;=======================================
Set $UninstRegKeyPath$ = "[" + $PackageRegBase$ + "%s%\" + $ProductName$ + "]"
Set $UninstDir$  = GetRegistryStringValueSysNative($UninstRegKeyPath$ + " InstallDir")
Set $UninstVer$  = GetRegistryStringValueSysNative($UninstRegKeyPath$ + " Version")
Set $UninstArch$ = GetRegistryStringValueSysNative($UninstRegKeyPath$ + " Architecture")
Set $UninstName$ = GetRegistryStringValueSysNative($UninstRegKeyPath$ + " ProductName")

if ($UninstDir$ = "")
	comment "NOTICE: no uninstall location info found in registry at " + $UninstRegKeyPath$
	Set $UninstRegList$ = addToList($UninstRegList$, $UninstRegKeyPath$)
else
	if not($UninstName$ = $ProductName$)
		logWarning "ProductName in " + $UninstRegKeyPath$ + " does not match expected value. Found: " + $UninstName$
		comment "***** Skipping key! *****"
	else
		if FileExists($UninstDir$)
			;=== normalize:
			if not (strPart($UninstDir$, strLength($UninstDir$),"1") = "\" )
				set $UninstDir$ = $UninstDir$ + "\"
			endif
			;=== add to removal list
			Set $ListVal$ = $UninstDir$ + "|" + $UninstArch$ + "|" + $UninstVer$
			if (count(getSubListByMatch($ListVal$, $UninstList$))="0")
				set $UninstList$ = addToList($UninstList$, $ListVal$)
			endif
		else
			comment "NOTICE: No Files found at location given by " + $UninstRegKeyPath$
		endif
		Set $UninstRegList$ = addToList($UninstRegList$, $UninstRegKeyPath$)
	endif
endif


;=======================================
[sub_do_opsi_inst_remove_generals]
;=======================================
Message "Removing link from startmenu"
LinkFolder_RemoveVivaldi
LinkFolder_RemoveDesktopLink
;if ($pr_MakeDefault$ = "true")
;	Message "Removing Vivaldi as default handler"
;	Registry_RemoveVivaldiDefault /sysnative
;endif
Message "Removing Vivaldi handler settings from registry"
Registry_RemoveVivaldiHTM /sysnative


;=======================================
[sub_do_opsi_inst_remove]
;=======================================
Set $UninstDir$  = takeString(0, splitString("%s%","|"))
Set $UninstVer$  = takeString(2, splitString("%s%","|"))
Set $UninstArch$ = takeString(1, splitString("%s%","|"))

if FileExists($UninstDir$)
	if ($UninstVer$="") or ($UninstArch$="")
		Message "Uninstalling previous setup of " + $ProductName$
	else
		Message "Uninstalling previous setup of " + $UninstName$ + " (" + $UninstArch$ + " bit)"
	endif

	Message "Removing installation directory"
	set $LogLevel$ = getLogLevel
	SetLogLevel=5
	Files_RemoveInstallDir
	if (FileExists("$UninstDir$"))
		logWarning "Install directory still exists: [" + "$UninstDir$" + "]"
	endif
	SetLogLevel=$LogLevel$
endif


;=====================================================================
[Files_RemoveInstallDir]
;=====================================================================
del -sf "$UninstDir$"


;=====================================================================
[LinkFolder_RemoveVivaldi]
;=====================================================================
set_basefolder common_programs
set_subfolder ""
;delete_element "$ProductName$"
delete_element $ProductName$


;=====================================================================
[LinkFolder_RemoveDesktopLink]
;=====================================================================
set_basefolder common_desktopdirectory
set_subfolder ""
;delete_element "$ProductName$"
delete_element $ProductName$


;=====================================================================
[Registry_RemoveVivaldiInfo_loop]
;=====================================================================
deletekey %s%


;=====================================================================
[Registry_RemoveVivaldiHTM]
;=====================================================================
deleteKey [HKEY_CLASSES_ROOT\VivaldiHTM]
deleteKey [HKEY_LOCAL_MACHINE\SOFTWARE\Clients\StartMenuInternet\Vivaldi]
;deleteKey [HKEY_CLASSES_ROOT\CLSID\{42042206-2D85-11D3-8CFF-005004838597}\Old Icon\VivaldiHTM\DefaultIcon]

openkey [HKEY_LOCAL_MACHINE\SOFTWARE\RegisteredApplications]
deleteVar "Vivaldi"

openkey [HKEY_CLASSES_ROOT\.htm\OpenWithProgIDs]
deleteVar "VivaldiHTM"
openkey [HKEY_CLASSES_ROOT\.html\OpenWithProgIDs]
deleteVar "VivaldiHTM"
openkey [HKEY_CLASSES_ROOT\.xht\OpenWithProgIDs]
deleteVar "VivaldiHTM"
openkey [HKEY_CLASSES_ROOT\.xhtml\OpenWithProgIDs]
deleteVar "VivaldiHTM"
openkey [HKEY_CLASSES_ROOT\.xhtml\OpenWithProgIDs]
deleteVar "VivaldiHTM"
openkey [HKEY_CLASSES_ROOT\.pdf\OpenWithProgIDs]
deleteVar "VivaldiHTM"
openkey [HKEY_CLASSES_ROOT\.svg\OpenWithProgIDs]
deleteVar "VivaldiHTM"
openkey [HKEY_CLASSES_ROOT\.webp\OpenWithProgIDs]
deleteVar "VivaldiHTM"
openkey [HKEY_CLASSES_ROOT\.shtml\OpenWithProgIDs]
deleteVar "VivaldiHTM"


;=====================================================================
[Registry_RemoveVivaldiDefault]
;=====================================================================
openkey [HKEY_CLASSES_ROOT\.htm]
deleteVar ""
openkey [HKEY_CLASSES_ROOT\.html]
deleteVar ""
openkey [HKEY_CLASSES_ROOT\.xht]
deleteVar ""
openkey [HKEY_CLASSES_ROOT\.xhtml]
deleteVar ""
openkey [HKEY_CLASSES_ROOT\.shtml]
deleteVar ""
openkey [HKEY_CLASSES_ROOT\.svg]
deleteVar ""

openkey [HKEY_CLASSES_ROOT\http\DefaultIcon]
deleteVar ""
openkey [HKEY_CLASSES_ROOT\http\shell\open\command]
deleteVar ""

openkey [HKEY_CLASSES_ROOT\https\DefaultIcon]
deleteVar ""
openkey [HKEY_CLASSES_ROOT\https\shell\open\command]
deleteVar ""

openkey [HKEY_CLASSES_ROOT\ftp\DefaultIcon]
deleteVar ""
openkey [HKEY_CLASSES_ROOT\ftp\shell\open\command]
deleteVar ""

openkey [HKEY_LOCAL_MACHINE\SOFTWARE\Clients\StartMenuInternet]
deleteVar ""

[EOF_delsub]
